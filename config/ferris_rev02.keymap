#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <31 10>;
        };

        Shift_Enter {
            bindings = <&kp LS(ENTER)>;
            key-positions = <20 31>;
        };

        Desktop_Left {
            bindings = <&kp LC(LEFT)>;
            key-positions = <11 12>;
        };

        Desktop_Right {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <12 13>;
        };

        Shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp Q    &kp W           &kp E  &kp R      &kp T          &kp Y            &kp U     &kp I      &kp O       &kp P
&lt 2 A  &mt LEFT_GUI S  &kp D  &kp F      &kp G          &kp H            &kp J     &kp K      &kp L       &kp SQT
&lt 4 Z  &kp X           &kp C  &kp V      &kp B          &kp N            &kp M     &kp COMMA  &kp PERIOD  &kp SLASH
                                &lt 3 TAB  &lt 1 SPACE    &kp RIGHT_SHIFT  &kp BSPC
            >;
        };

        Symbols {
            bindings = <
&kp N1           &kp N2     &kp N3     &kp N4      &kp N5         &kp N6     &kp N7         &kp N8    &kp N9                &kp N0
&kp EXCLAMATION  &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LG(F)        &kp LG(Z)  &kp LG(C)  &kp LG(V)   &kp DEL        &kp BSLH   &kp MINUS      &kp SEMI  &kp LBKT              &kp RBKT
                                       &lt 3 TAB   &lt 1 SPACE    &kp RSHFT  &kp BSPC
            >;
        };

        Functions {
            bindings = <
&kp ESCAPE  &kp LA(LEFT_ARROW)  &kp UP_ARROW       &kp LA(RIGHT)      &kp LG(Z)           &kp K_MUTE       &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&trans      &kp LEFT_ARROW      &kp DOWN           &kp RIGHT          &kp LS(LG(V))       &kp LG(T)        &kp LC(LS(TAB))    &kp LC(TAB)      &kp LG(MINUS)         &kp LG(PLUS)
&none       &kp LC(LA(LEFT))    &kp LA(LC(ENTER))  &kp LA(LC(RIGHT))  &kp LEFT_CONTROL    &kp LG(L)        &kp LG(F)          &none            &none                 &none
                                                   &lt 3 TAB          &lt 1 SPACE         &kp RIGHT_SHIFT  &kp BACKSPACE
            >;
        };

        Numbers {
            bindings = <
&kp STAR  &kp N7  &kp N8  &kp N9     &kp BACKSPACE    &none            &kp PLUS   &kp MINUS             &none                  &none
&kp FSLH  &kp N4  &kp N5  &kp N6     &kp TAB          &none            &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none
&kp N0    &kp N1  &kp N2  &kp N3     &kp DOT          &none            &none      &none                 &none                  &none
                          &lt 3 TAB  &lt 1 SPACE      &kp RIGHT_SHIFT  &kp BSPC
            >;
        };

        Lark {
            bindings = <
&kp ESCAPE  &kp LG(L)             &kp LG(E)       &kp LG(R)      &kp LG(A)        &kp LG(ENTER)      &kp LG(D)             &kp LC(LS(L))         &kp LA(LS(F))         &none
&none       &kp LG(B)             &kp LG(I)       &kp LG(U)      &kp LG(LS(X))    &kp LG(SEMICOLON)  &kp LG(LA(NUMBER_1))  &kp LG(LA(NUMBER_2))  &kp LG(LA(NUMBER_3))  &kp LG(LA(N0))
&trans      &kp LG(LS(NUMBER_8))  &kp LG(LS(N7))  &kp LG(LA(T))  &none            &kp LG(K)          &none                 &none                 &none                 &none
                                                  &lt 3 TAB      &lt 1 SPACE      &kp RIGHT_SHIFT    &kp BACKSPACE
            >;
        };
    };
};
